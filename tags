!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Bidirectional	model.py	/^from keras.layers.wrappers import Bidirectional$/;"	i
Convolution1D	model.py	/^from keras.layers.convolutional import Convolution1D$/;"	i
Embedding	model.py	/^from keras.layers import Embedding$/;"	i
Input	model.py	/^from keras.layers import LSTM, Input, merge, Lambda$/;"	i
K	model.py	/^from keras import backend as K$/;"	i
LSTM	model.py	/^from keras.layers import LSTM, Input, merge, Lambda$/;"	i
Lambda	model.py	/^from keras.layers import LSTM, Input, merge, Lambda$/;"	i
Model	model.py	/^from keras.models import Model$/;"	i
QAData	data.py	/^class QAData():$/;"	c
QAData	qa.py	/^from data import QAData, Vocabulary$/;"	i
QAModel	model.py	/^class QAModel():$/;"	c
QAModel	qa.py	/^from model import QAModel$/;"	i
Vocabulary	data.py	/^class Vocabulary(dict):$/;"	c
Vocabulary	qa.py	/^from data import QAData, Vocabulary$/;"	i
Y	qa.py	/^        Y = np.zeros(shape=(questions.shape[0],))$/;"	v
__delitem__	data.py	/^    def __delitem__(self, key):$/;"	m	class:Vocabulary	file:
__init__	data.py	/^    def __init__(self):$/;"	m	class:QAData
__init__	data.py	/^    def __init__(self, vocabulary_file_name):$/;"	m	class:Vocabulary
__len__	data.py	/^    def __len__(self):$/;"	m	class:Vocabulary	file:
__setitem__	data.py	/^    def __setitem__(self, key, value):$/;"	m	class:Vocabulary	file:
batch_size	qa.py	/^            batch_size=64,$/;"	v
embedding_file	qa.py	/^    embedding_file = ".\/data\/word2vec_100_dim.embeddings"$/;"	v
epoch	qa.py	/^    epoch = 1$/;"	v
epochs	qa.py	/^            epochs=1,$/;"	v
get_bilstm_model	model.py	/^    def get_bilstm_model(self, embedding_file, vocab_size):$/;"	m	class:QAModel
get_cosine_similarity	model.py	/^    def get_cosine_similarity(self):$/;"	m	class:QAModel
get_lstm_cnn_model	model.py	/^    def get_lstm_cnn_model(self, embedding_file, vocab_size):$/;"	m	class:QAModel
get_training_data	data.py	/^    def get_training_data(self):$/;"	m	class:QAData
merge	model.py	/^from keras.layers import LSTM, Input, merge, Lambda$/;"	i
namedtuple	data.py	/^from collections import namedtuple$/;"	i
np	model.py	/^import numpy as np$/;"	i
np	qa.py	/^import numpy as np$/;"	i
pad	data.py	/^    def pad(self, data, length):$/;"	m	class:QAData
pad_sequences	data.py	/^        from keras.preprocessing.sequence import pad_sequences$/;"	i
pickle	data.py	/^import pickle$/;"	i
qa_data	qa.py	/^        qa_data = QAData()$/;"	v
qa_model	qa.py	/^    qa_model = QAModel()$/;"	v
random	data.py	/^import random$/;"	i
validation_split	qa.py	/^            validation_split=0.1,$/;"	v
verbose	qa.py	/^            verbose=1$/;"	v
vocabulary	qa.py	/^    vocabulary = Vocabulary(".\/data\/vocabulary")$/;"	v
